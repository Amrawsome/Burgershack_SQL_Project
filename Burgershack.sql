/*Laura Andrews D21125370 TU856
  Stephen Moore D21125383 TU856
  Group - Rock, Paper, Scissors*/
-- Generated by Oracle SQL Developer Data Modeler 21.2.0.183.1957
--   at:        2021-11-30 15:32:05 GMT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



DROP TABLE booking CASCADE CONSTRAINTS;

DROP TABLE customer CASCADE CONSTRAINTS;

DROP TABLE employee CASCADE CONSTRAINTS;

DROP TABLE overstay CASCADE CONSTRAINTS;

DROP TABLE restaurant CASCADE CONSTRAINTS;

DROP TABLE "Table" CASCADE CONSTRAINTS;

DROP TABLE tracing CASCADE CONSTRAINTS;

-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE booking (
    bookingid           NUMBER NOT NULL,
    bookingstyle        VARCHAR2(20) NOT NULL,
    bookingtimehour     NUMBER NOT NULL,
    bookingpeopleamount NUMBER NOT NULL,
    customer_custid     NUMBER NOT NULL
);

CREATE UNIQUE INDEX booking__idx ON
    booking (
        customer_custid
    ASC );

ALTER TABLE booking ADD CONSTRAINT bookingtime_ck CHECK ( bookingtimehour < 2 );

ALTER TABLE booking ADD CONSTRAINT bookingpeopleamount_ck CHECK ( bookingpeopleamount < 6 );

ALTER TABLE booking ADD CONSTRAINT booking_pk PRIMARY KEY ( bookingid );

CREATE TABLE customer (
    custid        NUMBER NOT NULL,
    custname      VARCHAR2(30) NOT NULL,
    custaddress   VARCHAR2(50) NOT NULL,
    custemail     VARCHAR2(50) NOT NULL,
    custage       NUMBER NOT NULL,
    table_tableid NUMBER NOT NULL
);

CREATE UNIQUE INDEX customer__idx ON
    customer (
        table_tableid
    ASC );

ALTER TABLE customer ADD CONSTRAINT custage_ck CHECK ( custage > 18 );

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( custid );

CREATE TABLE employee (
    employid          NUMBER NOT NULL,
    employlocatbranch VARCHAR2(20) NOT NULL,
    employname        VARCHAR2(30) NOT NULL,
    employaddress     VARCHAR2(50) NOT NULL,
    employphonenum    NUMBER NOT NULL,
    employemail       VARCHAR2(50) NOT NULL,
    employdob         DATE NOT NULL,
    employstartdate   DATE NOT NULL,
    restaurant_restid NUMBER NOT NULL,
    table_tableid     NUMBER
);

ALTER TABLE employee ADD CONSTRAINT employemail_ck CHECK ( employemail LIKE '%@burgershack.com%' );

ALTER TABLE employee ADD CONSTRAINT employee_pk PRIMARY KEY ( employid );

CREATE TABLE overstay (
    overid          NUMBER NOT NULL,
    overtimemin     NUMBER NOT NULL,
    customer_custid NUMBER NOT NULL
);

CREATE UNIQUE INDEX overstay__idx ON
    overstay (
        customer_custid
    ASC );

ALTER TABLE overstay ADD CONSTRAINT overstay_pk PRIMARY KEY ( overid );

CREATE TABLE restaurant (
    restid       NUMBER NOT NULL,
    restaddress  VARCHAR2(50) NOT NULL,
    restphonenum NUMBER NOT NULL
);

ALTER TABLE restaurant ADD CONSTRAINT restaurant_pk PRIMARY KEY ( restid );

CREATE TABLE "Table" (
    tableid        NUMBER NOT NULL,
    tablelocatarea VARCHAR2(20) NOT NULL,
    tabletype      VARCHAR2(20) NOT NULL
);

ALTER TABLE "Table" ADD CONSTRAINT table_pk PRIMARY KEY ( tableid );

CREATE TABLE tracing (
    traceid       NUMBER NOT NULL,
    tracename     VARCHAR2(30) NOT NULL,
    traceemail    VARCHAR2(50) NOT NULL,
    tracephonenum NUMBER NOT NULL,
    table_tableid NUMBER NOT NULL
);

ALTER TABLE tracing ADD CONSTRAINT tracing_pk PRIMARY KEY ( traceid );

ALTER TABLE booking
    ADD CONSTRAINT booking_customer_fk FOREIGN KEY ( customer_custid )
        REFERENCES customer ( custid );

ALTER TABLE customer
    ADD CONSTRAINT customer_table_fk FOREIGN KEY ( table_tableid )
        REFERENCES "Table" ( tableid );

ALTER TABLE employee
    ADD CONSTRAINT employee_restaurant_fk FOREIGN KEY ( restaurant_restid )
        REFERENCES restaurant ( restid );

ALTER TABLE employee
    ADD CONSTRAINT employee_table_fk FOREIGN KEY ( table_tableid )
        REFERENCES "Table" ( tableid );

ALTER TABLE overstay
    ADD CONSTRAINT overstay_customer_fk FOREIGN KEY ( customer_custid )
        REFERENCES customer ( custid );

ALTER TABLE tracing
    ADD CONSTRAINT tracing_table_fk FOREIGN KEY ( table_tableid )
        REFERENCES "Table" ( tableid );

/*Laura Andrews D21125370 TU856
  Stephen Moore D21125383 TU856
  Group - Rock, Paper, Scissors*/

/*********INSERTING DATA INTO TABLES***********/
/*TABLE : restaurant */
INSERT INTO restaurant (restid, restaddress, restphonenum) VALUES (101, '1 Yemen Road', 0123456789);
INSERT INTO restaurant (restid, restaddress, restphonenum) VALUES (201, '2 Yemen Road', 1234567890);
INSERT INTO restaurant (restid, restaddress, restphonenum) VALUES (301, '3 Yemen Road', 2345678901);
INSERT INTO restaurant (restid, restaddress, restphonenum) VALUES (401, '4 Yemen Road', 3456789012);
INSERT INTO restaurant (restid, restaddress, restphonenum) VALUES (501, '5 Yemen Road', 4567890123);


/*TABLE : Table */
INSERT INTO "Table" (tableid, tablelocatarea, tabletype) VALUES (1, 'Window', '2 seater');
INSERT INTO "Table" (tableid, tablelocatarea, tabletype) VALUES (2, 'Window', '4 seater');
INSERT INTO "Table" (tableid, tablelocatarea, tabletype) VALUES (3, 'Interior', '6 seater');
INSERT INTO "Table" (tableid, tablelocatarea, tabletype) VALUES (4, 'Interior', '8 seater');
INSERT INTO "Table" (tableid, tablelocatarea, tabletype) VALUES (5, 'Window', '4 seater');


/*TABLE : employee */
INSERT INTO employee 
(employid, employlocatbranch, employname, employaddress, employphonenum, employemail, employdob, employstartdate, restaurant_restid, table_tableid)
VALUES (1, '1 Yeman Road', 'Liam Smith', '1 Main Street', '11111111', 'liamsmith@burgershack.com', TO_DATE('11/09/2000', 'DD/MM/YYYY'),TO_DATE('1/02/2020', 'DD/MM/YYYY'), 101, 1);
INSERT INTO employee 
(employid, employlocatbranch, employname, employaddress, employphonenum, employemail, employdob, employstartdate, restaurant_restid, table_tableid)
VALUES (2, '2 Yeman Road', 'Oliver Brown', '2 Main Street', '22222222', 'oliverbrown@burgershack.com', TO_DATE('26/11/2000', 'DD/MM/YYYY'),TO_DATE('1/03/2020', 'DD/MM/YYYY'), 201, 2);
INSERT INTO employee 
(employid, employlocatbranch, employname, employaddress, employphonenum, employemail, employdob, employstartdate, restaurant_restid, table_tableid)
VALUES (3, '3 Yeman Road', 'Ava Jones', '3 Main Street', '33333333', 'avajones@burgershack.com', TO_DATE('29/04/2001', 'DD/MM/YYYY'),TO_DATE('1/04/2020', 'DD/MM/YYYY'), 301, 3);
INSERT INTO employee 
(employid, employlocatbranch, employname, employaddress, employphonenum, employemail, employdob, employstartdate, restaurant_restid, table_tableid)
VALUES (4, '4 Yeman Road', 'Charlotte Miller', '4 Main Street', '44444444', 'charlottlemiller@burgershack.com', TO_DATE('06/06/2001', 'DD/MM/YYYY'),TO_DATE('1/05/2020', 'DD/MM/YYYY'), 401, 4);
INSERT INTO employee 
(employid, employlocatbranch, employname, employaddress, employphonenum, employemail, employdob, employstartdate, restaurant_restid, table_tableid)
VALUES (5, '5 Yeman Road', 'Sophia Davis', '5 Main Street', '55555555', 'sophiadavis@burgershack.com', TO_DATE('23/10/1990', 'DD/MM/YYYY'),TO_DATE('1/06/2020', 'DD/MM/YYYY'), 501, 5);


/*TABLE : tracing */
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (1, 'Emma Willams', 'emmawillams@gmail.com', 5678901234, 1);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (2, 'Amelia Garcia', 'ameliagarcia@gmail.com', 6789012345, 2);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (3, 'James Anderson', 'jamesanderson@gmail.com', 7890123456, 2);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (4, 'Isabella Hernandez', 'isabellahernandez@gmail.com', 8901234567, 3);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (5, 'Benjamin Lee', 'benjaminlee@gmail.com', 9012345678, 3);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (6, 'Lucas Perez', 'lucasperez@gmail.com', 5467863297, 3);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (7, 'Mia Thompson', 'miathompson@gmail.com', 8986543259, 4);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (8, 'Henry Taylor', 'henrytaylor@gmail.com', 7643921073, 4);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (9, 'Harper Moore', 'harpermoore@gmail.com', 1264830486, 4);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (10, 'Alexander Jackson', 'alexanderjackson@gmail.com', 7895764214, 5);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (11, 'Lydia Martin', 'lydiamartin@gmail.com', 7564389620, 5);
INSERT INTO tracing (traceid, tracename, traceemail, tracephonenum, table_tableid) VALUES (12, 'Allison Kelly', 'allisonkelly@gmail.com', 4356789321, 5);

/*TABLE : customer */
INSERT INTO customer (custid, custname, custaddress, custemail, custage, table_tableid) VALUES (1, 'Olivia Johnson', '1 Fifth Avenue', 'oliviajohnson@gmail.com', 21, 1);
INSERT INTO customer (custid, custname, custaddress, custemail, custage, table_tableid) VALUES (2, 'Alexis Garcia', '2 Fifth Avenue', 'alexisgarcia@gmail.com', 41, 2);
INSERT INTO customer (custid, custname, custaddress, custemail, custage, table_tableid) VALUES (3, 'Chris Hernandez', '3 Fifth Avenue', 'chrisanderson@gmail.com', 35, 3);
INSERT INTO customer (custid, custname, custaddress, custemail, custage, table_tableid) VALUES (4, 'Ethan Moore', '4 Fifth Avenue', '@gmail.com', 50, 4);
INSERT INTO customer (custid, custname, custaddress, custemail, custage, table_tableid) VALUES (5, 'Kian Kelly', '5 Fifth Avenue', '@gmail.com', 28, 5);


/*TABLE : booking */
INSERT INTO booking (bookingid, bookingstyle, bookingtimehour, bookingpeopleamount, customer_custid) VALUES (1, 'By phone', 1, 2, 1);
INSERT INTO booking (bookingid, bookingstyle, bookingtimehour, bookingpeopleamount, customer_custid) VALUES (2, 'Online', 1, 3, 2);
INSERT INTO booking (bookingid, bookingstyle, bookingtimehour, bookingpeopleamount, customer_custid) VALUES (3, 'Online', 1, 4, 3);
INSERT INTO booking (bookingid, bookingstyle, bookingtimehour, bookingpeopleamount, customer_custid) VALUES (4, 'Walk-in', 1, 4, 4);
INSERT INTO booking (bookingid, bookingstyle, bookingtimehour, bookingpeopleamount, customer_custid) VALUES (5, 'By phone', 1, 4, 5);

/*TABLE : overstay */
INSERT INTO overstay (overid, overtimemin, customer_custid) VALUES (1, 5, 1);
INSERT INTO overstay (overid, overtimemin, customer_custid) VALUES (2, 10, 2);
INSERT INTO overstay (overid, overtimemin, customer_custid) VALUES (3, 6, 3);
INSERT INTO overstay (overid, overtimemin, customer_custid) VALUES (4, 4, 4);
INSERT INTO overstay (overid, overtimemin, customer_custid) VALUES (5, 8, 5);


COMMIT;


/*********SQL STATEMENTS TO QUERY THE DATABASE*********/
/* UPDATE/ DELETE using a subquery */
/* This statement deletes a guest from the tracing table using a subquery to know which guest to delete
This can be useful if a guest needs to be deleted from contact tracing  */
DELETE FROM tracing
WHERE tracename = (SELECT tracename
                  FROM tracing
                  WHERE traceid = 3);


/* query using the selection function (CASE/DECODE) */
/* This statement implements the penalty of being charged 5 euro per minute they overstayed. 
If a customer and the guests overstay their 2 hour time limit the penalty begins.
This is benefical as it helps ensure government guidelines are met in buger shack restaurants.*/
SELECT overid, overtimemin,
    CASE overtimemin
        WHEN 1 THEN 5*overtimemin
        WHEN 2 THEN 10*overtimemin 
        WHEN 3 THEN 15*overtimemin
        WHEN 4 THEN 20*overtimemin
        WHEN 5 THEN 25*overtimemin
        WHEN 6 THEN 30*overtimemin
        WHEN 7 THEN 35*overtimemin
        WHEN 8 THEN 40*overtimemin
        WHEN 9 THEN 45*overtimemin
        WHEN 10 THEN 50*overtimemin
    ELSE overtimemin
    END AS "Penalty Fine"
FROM overstay;


/* INNER JOIN using a GROUP function */
/* This statement shows how many guests were at each table, not including the main customer.
This is useful to ensure there were not too many guest at one table and 
it provides details for contact tracing, knowing how many people could of been exposed */
SELECT tableid AS "Table No.", COUNT(tracename)AS "Guests (excl.Customer)"
FROM "Table"
INNER JOIN tracing ON "Table".TABLEID = tracing.table_tableid
GROUP BY tableid;


/* LEFT OUTER JOIN */
/* This statement shows the employees at burger shack and when the started, it also shows the restaurant associated with each employee.
It can be useful for the company to keep track of when each employy started and at what restaurant they work at */
SELECT employname AS "Employee", 
employstartdate AS "Start Date", 
restid AS "Restaurant ID" , 
restaddress AS "Restaurant Address"
FROM employee
LEFT OUTER JOIN restaurant
ON employee.restaurant_restid = restaurant.restid;


/* RIGHT OUTER JOIN (different to left outer join) */
/* This statement displays specfic details about the tables relating to the cusotmers.
This is benefical in seeing where and who sat at each table */
SELECT 
tableid AS "Table no." , 
tablelocatarea AS "Table Location",
custname AS "Customer", 
custage AS "Customer Age"
FROM "Table"
RIGHT OUTER JOIN customer
ON "Table".TABLEID = customer.table_tableid;


/* UNION */
/* This statement shows the bookingID and customerID that belongs belongs to each customer, and how that customer booked the restaurant. 
This is benefical for contact tracing and is an efficient method to see details about a customer and their guests */
SELECT custid, custname, bookingid, bookingstyle
FROM customer
LEFT JOIN booking
ON customer.custid = booking.customer_custid
UNION 
SELECT custid, custname, bookingid, bookingstyle
FROM customer
RIGHT JOIN booking
ON booking.customer_custid = customer.custid;


/* INTERSECT */
/* This statement illustrates what the employee id and name have in common with the restaurant id and address.
This is useful because the company can see how many employees each restaurant has and who works there */
SELECT employid, employName, restid, restaurant.restaddress
FROM employee
LEFT JOIN restaurant
ON employee.restaurant_restid = restaurant.restid
INTERSECT
SELECT employid, employName, restid, restaurant.restaddress
FROM employee
RIGHT JOIN restaurant
ON employee.restaurant_restid = restaurant.restid;


/* VIEW (can use any of the SQL statements before) */
/* This statement creates a different view of the database where the table, customer and guests are shown.
This is useful for contact tracing because we can see the customer and all the guests that sat at a particular table */
DROP VIEW TableView;

CREATE VIEW TableView AS
SELECT 
    tableid AS "Table No.", 
    custname AS "Customer", 
    tracename AS "Guests"
FROM "Table"
INNER JOIN tracing ON "Table".TABLEID = tracing.table_tableid
INNER JOIN customer ON "Table".TABLEID = customer.table_tableid
ORDER BY tableid ASC;

SELECT * FROM TableView;